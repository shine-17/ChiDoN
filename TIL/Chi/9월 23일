solid 원칙

1. 단일 책임 원칙 -> 클래스 useCase

2. 개방-폐쇄 원칙 -> Di? 클라이언트 코드가 영향받지않게 함. 인터페이스만 변경해서

3. 리스코프 치환 원칙 -> 자식 클래스가 부모 클래스 언제든 대체 가능하게 함 예를 들면 업 캐스팅 
업캐스팅은 서브클래스 객체를 슈퍼클래스 타입으로 변환하는 것을 의미. 리스코프 치환 원칙은 업캐스팅을 포함하지만, 
더 넓은 개념으로 서브타입이 슈퍼타입으로 대체될 때 프로그램이 올바르게 동작하는 걸 의미.

4. 인터페이스 분리 원칙 -> 인터페이스 useCase

5. 의존 역전 원칙 -> DI factory 
( ViewModelFactory는 DIP를 구현하는 예시. viewModelFactory를 사용하면 ViewModel이 특정 구현에 의존하지 않고, 
인터페이스나 추상 클래스에 의존함 )

compose
-> 이해 부분 정독 중
