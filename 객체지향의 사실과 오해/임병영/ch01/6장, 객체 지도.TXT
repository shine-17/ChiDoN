객체 지도

* 지도 은유의 핵심은 기능이 아니라 구조를 기반으로 모델을 구축하는 편이 좀 더 범용적이고 이해하기 쉬우며
변경에 안정적이라는 것이다.

즉, 객체 지향은 자주 변경되는 기능이 아니라 안정적인 구조를 기반으로 시스템을 구조화한다.

이번장에서는 기능이 아니라 구조를 바탕으로 시스템을 분할하는 객체지향의 또 다른 측면에 관해 설명한다.

* 기능 설계 VS 구조 설계
결론적으로 좋은 설계란 나중에라도 변경할 수 있는 여지를 남겨 놓는 설계다.
설계를 하는 목적은 나중에 설계하는 것을 허용하는 것이며, 설계의 일차적인 목표는 변경에 소요되는 비용 낮추는 것

이에 따라 객체 지향은 기능이 변경되더라도 객체 간의 구조는 그대로 유지할 수 있기에
변경에 소요되는 비용을 결과적으로 줄일 수 있다고 생각한다.

* 두 가지 재료: 기능과 구조
- 구조: 사용자나 이해관계자들이 도메인에 관해 생각하는 개념과 개념들 간의 관계로 표현
   > 도메인 모델링: 구조를 수집하고 표현하기 위한 기법
- 기능: 사용자의 목표를 만족시키기 위해 책임을 수행하는 시스템의 행위로 표현
   > 유스케이스 모델링 : 기능을 수집하고 표현하기 위한 기법

* 안정적인 재료: 구조
- 도메인이란?
사용자가 프로그램을 사용하는 대상 분야

- 모델이란?
지식을 선택적으로 단순화하고 의식적으로 구조화한 형태. 즉, 대상을 추상화하고 단순화한 것.

- 도메인 모델이란?
사용자가 프로그램을 사용하는 대상 영역에 관한 지식을 선택적으로 단순화하고 의식적으로 구조화한 형태
도메인 모델은 이해 관계자들이 바라보는 멘탈 모델(Mental Model)

설계자는 디자인 모델을 기반으로 만든 시스템 이미지가 사용자 모델을 정확하게 반영하도록 노력해야한다.
이것은 곧 애플리케이션이 도메인 모델을 기반으로 설계돼야 한다는 것을 의미한다.
이런 도메인 모델링을 범용적으로 만족시킬 수 있는 거의 유일한 모델링 패러다임이 "객체 지향"

사용자들이 이해하고 있는 도메인의 구조와 최대한 유사하가 코드를 구조화할 수 있다.

- 표현적 차이란?
소프트웨어에는 소프트웨어 객체와 현실 객체 사이의 의미적 거리가 존재하는데 이게 바로 표현적 차이

하지만 도메인 모델을 기반으로 설계하고 구현하는 것은 사용자가 도메인을 바라보는 관점을 그대로
코드에 반영할 수 있게 한다는 것이다. 결과적으로 표현적 차이가 줄어들고 사용자의 멘탈 모델이
그대로 코드에 녹아 스며들게 될 것이다.

- 도메인 모델의 핵심
사용자가 도메인을 바라보는 관점을 반영해 소프트웨어를 설계하고 구현하는것. 관점을 반영해야하는 이유는
사용자들이 누구보다도 도메인의 '본질적인'측면을 가장 잘 이해하고 있기 때문이다.

도메인 모델은 소프트웨어 구조의 기반을 이룬다.

결론적으로 안정적인 구조를 제공하는 도메인 모델을 기반으로 소프트웨어의 구조를 설계하면
변경에 유연하게 대응할 수 있는 탄력적인 소프트웨어를 만들 수 있다.

우리는 그럼 소프트웨어에는 도메인 모델링이 있다면 충분히 좋은 소프트웨어가 될 수 있겠다고 생각하는데
정말 전반을 걸친 결론적인 얘기를 하자면 사용자에게 중요한 것은 도메인 모델이 아니라 소프트웨어의 기능이라는 것이다.

사용자가 원하는 목표를 달성할 수 있는 다양한 기능을 제공하는것. 그것이 바로 소프트웨어.

* 불안정한 재료: 기능
- 유스케이스란?
사용자의 목표를 달성하기 위해 사용자와 시스템 간에 이뤄지는 상호작용의 흐름을 텍스트로 정리한 것

유스케이스의 가치는 사용자들의 목표를 중심으로 시스템의 기능적인 요구사항들을 이야기 형식으로 묶을
수 있다는 점이다.

- 특성
1. 유스케이스는 사용자와 시스템 간의 상호작용을 보여주는 텍스트
2. 유스케이스는 하나의 시나리오가 아니라 여러 시나리오들의 집합
3. 유스케이스는 단순한 피처 목록과는 다르다.
4. 유스케이스는 사용자 인터페이스와 관련된 세부 정보를 포함하지 말아야함
5. 설계 기법도, 객체지향 기법도 아니다.

사실 유스케이스는 객체지향과도 상관이 없다.
단지 기능적 요구사항을 사용자의 목표라는 문맥을 중심으로 묶기 위한 정리 기법

* 재료 합치기: 기능과 구조의 통합
변경에 유연한 소프트웨어를 만들기 위해서는 유스케이스에 정리된 시스템의 기능을 도메인 모델을
기반ㅇ로 한 객체들의 책임으로 분배해야한다.

시스템이라는 객체 안에는 더 작은 규모의 객체가 포함될 수 있다. 이제 시스템이 수행해야 하는 커다란
규모의 책임은 시스템 안에 살아가는 더 작은 크기의 객체들의 협력을 통해 구현될 수 있다.

- 유스케이스: 사용자에게 제공할 기능을 시스템의 책임으로 보게함
- 도메인 모델: 기능을 수용하기 위해 은우할 수 있는 안정적인 구조를 제공

위와 같은 역할들이 모여 책임 주도 설계가 완성된다.
책임-주도 설계는 유스케이스로부터 첫번째 메시지와 사용자가 달성하려는 목표를,
도메인 모델로부터 기능을 수용할 수 있는 안정적인 구조를 제공받아 실제로 동작하는 객체들의 협력 공동체를 창조한다.

결론적으로 객체 지향은 연결 완전성과 가역성이 높다. 모델에서 코드로, 코드에서 모델로의 변환이 매끄럽다.

우리는 사람들이 동일한 용어와 동일한 개념을 이용해 의사소통하고 코드로부터 도메인 모델을 유추할 수
있게 하는 것이 도메인 모델의 진정한 목표라는 것을 알아야한다.

이를 알면 유지보수하기 쉽고 유연한 객체지향 시스템을 만드는데 있어 첫걸음을 뗄 수 있을 것이다.
