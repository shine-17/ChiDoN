프로퍼티(property)는 정적
프로퍼티 값(property value)는 동적

부수 효과(side effect)란?
행동으로 인해 상태값이 변경되는 것을 말한다.

객체는 메세지를 통해서만 다른 객체와 의사소통 할 수 있다.
수신된 메세지에 따라 적절히 행동하여 자신의 상태를 변경할 수 있다.

책에서 말하는 캡슐화란?
객체는 상태를 캡슐 안에 감춰둔 채 외부로 노출하지 않는다.
객체가 외부에 노출하는 것은 행동뿐이며, 외부에서 객체에 접근할 수
있는 것 또한 행동뿐이다.

요청이나 메세지에 의해 행동을 하게 되고 행동에 의해 상태가 변화된다.

"기계 은유의 가장 큰 장점은 객체 캡슐화를 직관적이고 시각적으로
묘사한다는 점이다." -P.62
 
객체 지향에서 중요한 점은 하나의 객체가 다른 객체의 상태에 대해서
직접적으로 관여하지 못한다는 점이다. 예를 들어 사람과 음료수라는
두 개의 객체가 있다고 했을때 실존적으로는 사람이 음료수를 마시면
음료수의 양이 줄어든다고 표현하지만 객체 지향에서는
사람이 '마신다'라는 행동을
음료수는 '마셔진다'라는 행동을 해야지만 각각의 객체의 상태값이
변경될 수 있다는 뜻이다.

# 행동이 상태를 결정한다.
"상태를 먼저 결정하고 행동을 나중에 결정하는 방법은 설계에
나쁜 영향을 끼친다" -P.64
=> 여태까지 객체 지향에 대해서 바람직한 방향을 생각하지 못하고
개발에 참여했다는게 확 느껴진다. 객체의 상태를 결정하고 행동을
추가하는게 일반적이라고 생각했다. 이렇게 상태를 결정하고 행동을
나중에 결정했을때 아래와 같은 문제점이 있다.

1. 캡슐화 저하
2. 객체를 협력자가 아닌 고립된 섬으로 만든다.
3. 재사용성 저하
=> 재사용성은 다양한 협력에 참여할 수 있는 능력에서 나온다는 것

* 객체 지향 프로그래밍에서의 의인화란?
현실의 객체보다 더 많은 일을 할 수 있는 소프트웨어 객체의 특징

 현실 세계와 객체지향 세계 사이의 관계를 정확히 말할 수 있는 것은
바로 '은유'이다.

"객체지향 설계자로서 우리의 목적은 현실을 모방하는 것이 아니다.
단지 이상한 나라를 창조하기만 하면 된다."
=> 객체 지향이 현실 세계를 프로그래밍을 통해 구현을 해놓는다고 
생각하면 반드시 오류가 발생한다. 객체 지향은 은유와 의인화의 결과일뿐
현실세계를 바탕으로 이상한나라를 창조하는듯이 나만의 객체 지향적으로
설계된 세계를 만들면 된다.
