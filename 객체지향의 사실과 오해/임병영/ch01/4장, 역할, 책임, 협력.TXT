객체지향의 사실과 오해
“중요한 것은 개별 객체가 아니라 객체들 사이에 이뤄지는 협력이다.” -p.109
=>객체지향 패러다임이라는 말을 들었을때 
드는 생각은 객체 중심적으로 개발에 활용되는 패러다임이겠거니 
생각하는데 객체가 중심이 아니라 객체들 사이에 이뤄지는 협력이 
중요하다는 사실에 객체지향에 대한 개념을 다시 잡았다.

이번 장의 주제는 개별적인 객체의 행동이나 상태가 아니라
객체들 간의 협력이다. 

이 말을 조금 더 쉽게 이해할 수 있는 예시가 바로 "최후통첩 게임"이다.
인간은 어떤 본질적인 특성을 지니고 있느냐가 아니라 어떤 상황에
처하느냐에 따라 행동을 결정하는 것처럼 객체지향 패러다임에서의
객체도 마찬가지다.

객체들간의 협력에 따라 객체의 행동과 상태가 결정되는 것이다.

* 협력이란?
다수의 요청과 응답으로 구성되며 전체적으로 협력은 다수의
연쇄적인 요청과 응답의 흐름으로 구성된다.

* 협력의 시작은?
한사람이 다른 사람에게 도움을 요청할 때 시작된다.

요청과 응답은 협력에 참여하는 객체가 수행할 "책임"을 정의한다.

*책임이란?
어떤 대상에 대한 요청은 그 대상이 요청을 처리할 책임이 있음을 명시한다.
따라서 객체의 책임은 
'객체가 무엇을 알고 있는가?'와 '무엇을 할 수 있는가?'로 구성된다.

즉, 객체의 외부에 제공해 줄 수 있는 정보(아는것)와
외부에 제공해 줄 수 있는 서비스(하는 것)의 목록이다.

따라서 책임은 객체의 공용 인터페이스(public interface)를 구성한다.

책임을 수행하기 위해선 "메세지 전송(message-send)"이 필요하다.

객체지향 설계에서 협력에 참여하기 위해 어떤 객체가 어떤 책임을
수행해야하고 어떤 객체로부터 메세지를 수신할 것인지를 결정하는 것으로부터 시작한다.

그렇다면 역할은 무엇인가? 책임의 집합을 의미한다.
또한 역할은 협력 내에서 다른 객체로 대체할 수 있음을 나타내는 일종의 표식이다.

역할은 객체 지향 설계의 단순성(simplicuty), 유연성(flexibility), 
재사용성(reusability)을 뒷받침하는 핵심 개념이다.

역할의 가장 큰 가치는 하나의 협력 안에 여러 종류의 객체가 참여할 수 있게
함으로써 협력을 추상화 할 수 있다는 것이다.

실직적인 역할, 책임, 협력에 대한 설계 기법들이 바로
책임-주도 설계, 디자인 패턴, 테스트-주도 개발이다.

책임-주도 설계는 객체의 역할, 책임, 협력을 고안하기 위한 방법과 절차
디자인 패턴은 책임-주도 설계의 결과
테스트-주도 개발은 책임-주도 설계의 기본을 따르며 설계에 대한 검증을 해나아가는 방법이다.