5장 책임과 메세지

* 책임

객체지향 공동체를 구성하는 기본 단위는 '자율적'인 객체다.
객체들은 애플리케이션의 기능을 구현하기 위해 협력하고, 협력 과정에서 각자 맡은 바 책임을 다하기
위해 자율적으로 판단하고 행동한다.

객체가 어떤 행동을 하는 유일한 이유는 다른 객체로부터 요청을 수신했기 때문이다.

객체지향 애플리케이션을 설계하는 가장 널리 알려진 방법을 책임-주도 설계라고 부르는 이유는
적절한 책임의 선택이 전체 설계의 방향을 결정하기 때문이다.

"객체 지향 세계는 자울적인 객체들의 공동체라는 점을 명심하라. 객체가 자율적이기 위해서는
객체에게 할당되는 책읨 수준 역시 자율적이어야한다." -p.144
=> 책임 수준을 자율적으로 만든다는 것은 결국 객체의 행동 방법에 대해 관여하지는 않겠다.하지만
책임을 부여하겠다라는 것으로 이해했다.

자율적인 책임의 특징은 객체가 '어떻게(how)'해야 하는가가 아니라
'무엇(what)'을 해야 하는가를 설명한다는 것이다.

* 메세지
하나의 객체는 메시지를 전송함으로써 다른 객체에 접근한다.

메세지를 처리할 수 있다는 이야기는 객체가 해당 메시지에 해당하는 행동을 수행해야 할 책임이
있다는 것을 의미한다.

중요한 것은 메시지가 객체들이 서로 협력하기 위해 사용할 수 있는 유일한 의사소통 수단이라는 것이다.

그렇다면 메서드와 메시지의 차이는 무엇일까?
메시지는 '무엇'이 실행되기를 바라는지만 명시한다면 메서드는 어떻게 수행할 것인지, 즉 메시지를 내부적으로
어떻게 처리할지를 결정한다.

이렇게 메시지와 메서드의 차이를 알고 나면 객체지향의 핵심 개념인 다형성을 이해할 수 있다.

서로 다른 객체들이 다형성을 만족시킨다는 것은 객체들이 동일한 책임을 공유한다는 것을 의미한다.
즉, 다형성이란? 동일한 역할을 수행할 수 있는 객체들 사이의 "대체 가능성"을 의미한다.

위 책임과 메시지, 그리고 다형성 이 세가지 개념을 통해 객체지향의 패러다임에 대해 이해할 수 있다.

다형성을 이용해 협력을 유연하게 만들 수 있고 협력이란 어떤 객체가 어떤 책임을 가지고 다른 객체에게
메시지를 받음으로써 행동하는 과정을 말한다. 이때 메시지는 송신자와 수신자 사이의 결합도를 낮춤으로써
설계를 유연하고, 확장 가능하고, 재사용 가능하게 만든다.

따라서 가장 중요하게 봐야할 것은 메시지라고 생각을 했고 책의 이 말이 객체 지향 설계의 핵심이란 생각을 헀다.

"진정한 객체지향 패러다임으로의 도약은 개별적인 객체가 아니라 메시지를 주고 받는 객체들 사이의 
커뮤니케이션에 초점을 맞출 때 일어난다." -p.155

* 책임-주도 설계란?
객체지향 설계는 적절한 책임을 적절한 객체에게 할당하면서 메시지를 기반으로 협력하는 객체들의
관계를 발견하는 과정이다. 이처럼 책임을 완수하기 위해 협력하는 객체들을 이용해 시스템을 설계하는 방법

What/who 사이클, 책임주도설계의 핵심이 되며 어떤 행위가 필요한지를 먼저 결정한 후에 이 행위를 수행할
객체를 결정하는 방법을 말함

* 인터페이스
인터페이스는 객체가 다른 객체와 협력하기 위한 접점이다. 객체가 어떤 메시지를 수신할 수 있느냐
책임을 수행할 수 있느냐가 결국 어떤 인터페이스를 가질지 결정한다. 인터페이스는 메시지 수신 가능 목록과
책임 목록의 집합이라고 생각한다.

객체 지향적인 사고방식을 위한 인터페이스의 세가지 원칙
1. 좀 더 추상적인 인터페이스,즉 자율적인 책임을 가지는 것을 말함
2. 최소 인터페이스, 외부에서 사용할 필요가 없는 것은 노출시키지 말자는 것임
3. 인터페이스와 구현의 분리 원칙
=> 객체를 설계할 때 객체 외부에 노출되는 인터페이스와 객체의 내부에 숨겨지는 구현을
명확하게 분리해서 고려해야한다는 것을 의미한다.

인터페이스와 구현 분리의 원칙이 중요한 이유는 소프트웨어는 항상 변경되기 때문이다.

변경에 대한 안전지대를 만드는 것이 바로 인터페이스이고 인터페이스가 존재해야 객체의 자율성을 
보장할 수 있다. 여기서 중요한 개념 중 하나는 객체가 가져야 할 상태와 메서드 구현은 객체 내부에 속한다는 것이다.

여기서 이어지는 객체 설계 방법 중 하나가 바로 "캡슐화"이다.

상태와 행위를 함계 캡슐화함으로써 충분히 렵력적이고 만족스러울 정도로 자율적인 존재가 될 수 있는 것.
그것이 캡슐화이고 우리는 캡슐화를 통해 정보 은닉을 할 수 있다.

결론적으로 책임이 자율적일수록 협력이 이해하기 쉬워지고, 객체의 외부와 내부의 구분이 명확해지며
변경에 의한 파급효과를 제한할 수 있고, 유연하게 변경할 수 있는 동시에 다양한 문맥에서 재활용할 수 있게 된다.

* 책임이 자율성이 높아질 때의 효과
- 추상화
- 응집도 상승
- 결합도 저하
- 캡슐화 증진
- 인터페이스와 구현의 명확한 분리
- 설계의 우연성과 재사용성의 증가

객체지향의 출발점은 책임을 자율적으로 만드는 것이다. 그리고 이것은 우리가 선택하는 메시지에 따라 달라진다.
