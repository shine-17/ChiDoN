"해리 벡이 창조한 지하철 노선도의 핵심은 지도가 당연히 가져야 한다고
생각되는 '정확성'을 버리고 그 '목적'에 집중한 결과다." -p.75-
=> 객체 지향에서의 방향을 잘 설명해주는 문장이라고 생각한다.
현실을 정확하게 반영한다는 개념보다는 객체의 목적에 맞게 잘 구성한다는
생각이 객체지향에서의 중요한 관점이라고 생각한다.

객체지향 패러다임은 객체라는 추상화를 통해 현실의 복잡성을 극복한다.

* 객체지향 패러다임에서의 객체란?
명확한 경계를 가지고 서로 구별할 수 있는 구체적인 사람이나 사물

* 개념(concenpt)란?
공통점을 기반으로 객체들을 묶기 위한 그릇.
객체를 분류할 수 있는 일종의 체.

현실 세계에서의 수많은 객체들을 개별적인 단위로 취급하기엔
우리의 능력이 턱없이 부족하기에 객체지향 패러다임에서 개념을 적용한다.

그렇다면 객체에 개념이 적용하는 것이 가능해서 어떠한 객체 하나가
개념 그룹의 일원이 될 때 그 객체를 해당 개념의 "인스턴스(instance)"
라고도 할 수 있다.

* 개념의 세가지 관점
- 심볼(symbol): 개념을 가리키는 간략한 이름이나 명칭 / 트럼프
- 내연(intension): 개념의 완전한 정의를 나타내며 내연의 의미를 이용해
객체가 개념에 속하는지 여부를 확인할 수 있다. / 트럼프라는 개념의 특징
몸이 납작하고 네모나다는 것.
- 외연(extension): 개념에 속하는 모든 객체의 집합 / 트럼프에 소속되는
모든 객체의 집합을 말한다. 정원사, 병사, 신하, 왕자와 공주

그럼 위 모든 개념들에 대한 활용이 중요하다.
실제 객체지향 패러다임을 적용한 프로그래밍에서는 개념을 적절하게
적용 할수록 애플리케이션을 다루는 개발자의 머릿속에 객체를 쉽게
찾고 조작할 수 있는 정신적은 지도를 제공한다는 것이다.

타입은 개념이다.

* 다형성이란?
동일한 요청에 대해 서로 다른 방식으로 응답할 수 있는 능력을 뜻한다.

* 캡슐화란?
외부에 행동만을 제공하고 데이터는 행동 뒤로 감춰야한다.

단연 3장의 가장 핵심적인 문장이라고도 할 수 있다.
객체지향 패러다임에서의 가장 근본은 객체. 
"객체를 결정하는 것은 행동이다. 데이터는 단지 행동을 따를 뿐이다.
이것이 객체를 객체답게 만드는 가장 핵심적인 원칙이다." -p.95-

객체지향 패러다임에서는 일반화/특수화 관계 개념이 존재한다.
객체지향에서 일반화/특수화 관계를 결정하는 것은 객체의 상태를
표현하는 데이터가 아니라 행동이라는 것이다.

일반화/특수화 관계에서 조금 더 일반적인 타입을 슈퍼타입(super type)
좀 더 특수한 타입을 서브타입(sub type)이라고 한다.

* 결국 타입은 추상화다.
객체지향 패러다임에서 복잡성과 불필요함을 제거하고 단순성을 보장하는 것은
특징 중 하나이다.

객체를 정적인 관점에서 바라보기 위해서는 타입이 필요하고 타입은
추상화를 보장하는데 한 기여를 하는 것이다.

* 객체의 스냅샷(snapshot)이란?
객체가 특정 시점에 구체적으로 어떤 상태를 가지느냐.

"클래스는 단지 타입을 구현할 수 있는 여러 구현 메커니즘 중 하나일 뿐이다." -p.104-
그동안 내가 말하고 있었던 객체 지향 프로그래밍에서의 특징 중 하나를 
말해보라고 했을 때 얘기했던 클래스의 정확한 의미에 대해서 말해주고 있다.

"객체를 분류하는 기준은 타입이며, 타입을 나누는 기준은 객체가
수행하는 행동이라는 사실만을 기억하기 바란다."
=> 3장까지 읽으면서 객체지향 패러다임에서 중요한 관점은
행동이라는 것이다. 즉, 구현적으로 바라본다면 메서드.
객체 지향에서 객체에 대해 가장 잘 설명할 수 있는 것이 행동이라는 것에 대해서
기억하면 될 것 같다.

"결국 객체지향에서 중요한 것은 동적으로 변하는 객체의 '상태'와
상태를 변경하는 '행위'다. 클래스는 타입을 구현하기 위해
프로그래밍 언어에서 제공하는 구현 메커니즘이라는 사실을 기억하라." -p.105-
